{"ast":null,"code":"/**\n * Authentication service for the dashboard\n * Provides functions for login, logout, and checking authentication status\n */\n\n// DEMO MODE FLAG\nconst DEMO_MODE = process.env.REACT_APP_DEMO_MODE === 'true';\n// Determine API URL based on hostname\nlet apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nif (window.location.hostname === 'devops-dashboard.joshuamichaelhall.com') {\n  apiBaseUrl = 'https://devops-dashboard.joshuamichaelhall.com';\n}\nconst API_URL = `${apiBaseUrl}/api`;\nconst TOKEN_KEY = 'dashboard_auth_token';\nconst USER_KEY = 'dashboard_user';\n\n/**\n * Log in with username and password\n * @param {string} username - Username\n * @param {string} password - Password\n * @returns {Promise<Object>} Authentication result\n */\nexport const login = async (username, password) => {\n  try {\n    if (DEMO_MODE) {\n      console.log('Demo mode: simulating login with', username);\n\n      // In demo mode, any credentials work\n      const demoUser = {\n        id: 'demo-user',\n        username: 'demo',\n        isAdmin: false\n      };\n\n      // Still simulate a delay to mimic network request\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Store auth token and user info in localStorage\n      localStorage.setItem(TOKEN_KEY, 'demo-token-xyz123');\n      localStorage.setItem(USER_KEY, JSON.stringify(demoUser));\n      return {\n        success: true,\n        user: demoUser\n      };\n    }\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Authentication failed');\n    }\n    const data = await response.json();\n\n    // Store auth token and user info in localStorage\n    localStorage.setItem(TOKEN_KEY, data.token);\n    localStorage.setItem(USER_KEY, JSON.stringify({\n      username: data.username,\n      isAdmin: data.isAdmin\n    }));\n    return {\n      success: true,\n      user: data\n    };\n  } catch (error) {\n    console.error('Login error:', error);\n    if (DEMO_MODE) {\n      // Always succeed in demo mode\n      const demoUser = {\n        id: 'demo-user',\n        username: 'demo',\n        isAdmin: false\n      };\n      localStorage.setItem(TOKEN_KEY, 'demo-token-xyz123');\n      localStorage.setItem(USER_KEY, JSON.stringify(demoUser));\n      return {\n        success: true,\n        user: demoUser\n      };\n    }\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n/**\n * Log out current user\n */\nexport const logout = () => {\n  if (DEMO_MODE) {\n    console.log('Demo mode: simulating logout');\n    // Redirect without actually clearing storage in demo mode\n    window.location.href = '/login';\n    return {\n      success: true\n    };\n  }\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n\n  // Redirect to login page\n  window.location.href = '/login';\n  return {\n    success: true\n  };\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} Authentication status\n */\nexport const isAuthenticated = () => {\n  if (DEMO_MODE) {\n    return true; // Always authenticated in demo mode\n  }\n  return !!getAuthToken();\n};\n\n/**\n * Get current user information\n * @returns {Object|null} User object or null if not authenticated\n */\nexport const getCurrentUser = () => {\n  if (DEMO_MODE) {\n    // Always return demo user in demo mode\n    return {\n      id: 'demo-user',\n      username: 'demo',\n      isAdmin: false\n    };\n  }\n  const userJson = localStorage.getItem(USER_KEY);\n  return userJson ? JSON.parse(userJson) : null;\n};\n\n/**\n * Check if current user is admin\n * @returns {boolean} True if user is admin\n */\nexport const isAdmin = () => {\n  if (DEMO_MODE) {\n    return false; // Demo user is not admin\n  }\n  const user = getCurrentUser();\n  return user && user.isAdmin;\n};\n\n/**\n * Get auth token for API requests\n * @returns {string|null} Auth token or null if not authenticated\n */\nexport const getAuthToken = () => {\n  if (DEMO_MODE) {\n    return 'demo-token-xyz123'; // Demo token\n  }\n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Add auth token to fetch headers\n * @param {Object} headers - Headers object to add token to\n * @returns {Object} Headers with auth token added\n */\nexport const addAuthHeader = (headers = {}) => {\n  const token = getAuthToken();\n  if (token) {\n    return {\n      ...headers,\n      'Authorization': `Bearer ${token}`\n    };\n  }\n  return headers;\n};\n\n/**\n * Create a protected fetch function that adds auth headers\n * @param {string} url - URL to fetch\n * @param {Object} options - Fetch options\n * @returns {Promise} Fetch result\n */\nexport const authFetch = async (url, options = {}) => {\n  const headers = addAuthHeader(options.headers || {});\n\n  // Special case for demo mode - prevent actual API calls for modifying data\n  if (DEMO_MODE && (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH' || options.method === 'DELETE')) {\n    console.log('Demo mode: API call would be:', options.method, url);\n\n    // For dashboard data fetch, return demo data\n    if (url.includes('/dashboard/data')) {\n      return {\n        ok: true,\n        json: async () => require('../data/demo-data.json')\n      };\n    }\n\n    // For other endpoints, simulate success\n    return {\n      ok: true,\n      json: async () => ({\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      })\n    };\n  }\n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n\n  // If unauthorized in non-demo mode, log out\n  if (response.status === 401 && !DEMO_MODE) {\n    logout();\n    throw new Error('Your session has expired. Please log in again.');\n  }\n  return response;\n};","map":{"version":3,"names":["DEMO_MODE","process","env","REACT_APP_DEMO_MODE","apiBaseUrl","REACT_APP_API_URL","window","location","hostname","API_URL","TOKEN_KEY","USER_KEY","login","username","password","console","log","demoUser","id","isAdmin","Promise","resolve","setTimeout","localStorage","setItem","JSON","stringify","success","user","response","fetch","method","headers","body","ok","errorData","json","Error","error","data","token","message","logout","href","removeItem","isAuthenticated","getAuthToken","getCurrentUser","userJson","getItem","parse","addAuthHeader","authFetch","url","options","includes","require","status"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/services/authService.js"],"sourcesContent":["/**\n * Authentication service for the dashboard\n * Provides functions for login, logout, and checking authentication status\n */\n\n// DEMO MODE FLAG\nconst DEMO_MODE = process.env.REACT_APP_DEMO_MODE === 'true';\n// Determine API URL based on hostname\nlet apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';\nif (window.location.hostname === 'devops-dashboard.joshuamichaelhall.com') {\n  apiBaseUrl = 'https://devops-dashboard.joshuamichaelhall.com';\n}\nconst API_URL = `${apiBaseUrl}/api`;\nconst TOKEN_KEY = 'dashboard_auth_token';\nconst USER_KEY = 'dashboard_user';\n\n/**\n * Log in with username and password\n * @param {string} username - Username\n * @param {string} password - Password\n * @returns {Promise<Object>} Authentication result\n */\nexport const login = async (username, password) => {\n  try {\n    if (DEMO_MODE) {\n      console.log('Demo mode: simulating login with', username);\n      \n      // In demo mode, any credentials work\n      const demoUser = {\n        id: 'demo-user',\n        username: 'demo',\n        isAdmin: false\n      };\n      \n      // Still simulate a delay to mimic network request\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Store auth token and user info in localStorage\n      localStorage.setItem(TOKEN_KEY, 'demo-token-xyz123');\n      localStorage.setItem(USER_KEY, JSON.stringify(demoUser));\n      \n      return { success: true, user: demoUser };\n    }\n    \n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, password }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || 'Authentication failed');\n    }\n\n    const data = await response.json();\n    \n    // Store auth token and user info in localStorage\n    localStorage.setItem(TOKEN_KEY, data.token);\n    localStorage.setItem(USER_KEY, JSON.stringify({ \n      username: data.username,\n      isAdmin: data.isAdmin \n    }));\n    \n    return { success: true, user: data };\n  } catch (error) {\n    console.error('Login error:', error);\n    \n    if (DEMO_MODE) {\n      // Always succeed in demo mode\n      const demoUser = {\n        id: 'demo-user',\n        username: 'demo',\n        isAdmin: false\n      };\n      \n      localStorage.setItem(TOKEN_KEY, 'demo-token-xyz123');\n      localStorage.setItem(USER_KEY, JSON.stringify(demoUser));\n      \n      return { success: true, user: demoUser };\n    }\n    \n    return { success: false, error: error.message };\n  }\n};\n\n/**\n * Log out current user\n */\nexport const logout = () => {\n  if (DEMO_MODE) {\n    console.log('Demo mode: simulating logout');\n    // Redirect without actually clearing storage in demo mode\n    window.location.href = '/login';\n    return { success: true };\n  }\n  \n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n  \n  // Redirect to login page\n  window.location.href = '/login';\n  return { success: true };\n};\n\n/**\n * Check if user is authenticated\n * @returns {boolean} Authentication status\n */\nexport const isAuthenticated = () => {\n  if (DEMO_MODE) {\n    return true; // Always authenticated in demo mode\n  }\n  \n  return !!getAuthToken();\n};\n\n/**\n * Get current user information\n * @returns {Object|null} User object or null if not authenticated\n */\nexport const getCurrentUser = () => {\n  if (DEMO_MODE) {\n    // Always return demo user in demo mode\n    return {\n      id: 'demo-user',\n      username: 'demo',\n      isAdmin: false\n    };\n  }\n  \n  const userJson = localStorage.getItem(USER_KEY);\n  return userJson ? JSON.parse(userJson) : null;\n};\n\n/**\n * Check if current user is admin\n * @returns {boolean} True if user is admin\n */\nexport const isAdmin = () => {\n  if (DEMO_MODE) {\n    return false; // Demo user is not admin\n  }\n  \n  const user = getCurrentUser();\n  return user && user.isAdmin;\n};\n\n/**\n * Get auth token for API requests\n * @returns {string|null} Auth token or null if not authenticated\n */\nexport const getAuthToken = () => {\n  if (DEMO_MODE) {\n    return 'demo-token-xyz123'; // Demo token\n  }\n  \n  return localStorage.getItem(TOKEN_KEY);\n};\n\n/**\n * Add auth token to fetch headers\n * @param {Object} headers - Headers object to add token to\n * @returns {Object} Headers with auth token added\n */\nexport const addAuthHeader = (headers = {}) => {\n  const token = getAuthToken();\n  \n  if (token) {\n    return {\n      ...headers,\n      'Authorization': `Bearer ${token}`\n    };\n  }\n  \n  return headers;\n};\n\n/**\n * Create a protected fetch function that adds auth headers\n * @param {string} url - URL to fetch\n * @param {Object} options - Fetch options\n * @returns {Promise} Fetch result\n */\nexport const authFetch = async (url, options = {}) => {\n  const headers = addAuthHeader(options.headers || {});\n  \n  // Special case for demo mode - prevent actual API calls for modifying data\n  if (DEMO_MODE && \n      (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH' || options.method === 'DELETE')) {\n    console.log('Demo mode: API call would be:', options.method, url);\n    \n    // For dashboard data fetch, return demo data\n    if (url.includes('/dashboard/data')) {\n      return {\n        ok: true,\n        json: async () => require('../data/demo-data.json')\n      };\n    }\n    \n    // For other endpoints, simulate success\n    return {\n      ok: true,\n      json: async () => ({ \n        success: true, \n        message: 'This is a read-only demo. Data modifications are not saved.' \n      })\n    };\n  }\n  \n  const response = await fetch(url, {\n    ...options,\n    headers\n  });\n  \n  // If unauthorized in non-demo mode, log out\n  if (response.status === 401 && !DEMO_MODE) {\n    logout();\n    throw new Error('Your session has expired. Please log in again.');\n  }\n  \n  return response;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}