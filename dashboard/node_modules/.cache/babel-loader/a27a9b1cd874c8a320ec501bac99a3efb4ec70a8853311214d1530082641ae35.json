{"ast":null,"code":"/**\n * Clay CRM API service\n * Handles communication with the Clay CRM API\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst PROXY_URL = `${API_URL}/clay`;\nconst API_TIMEOUT = 8000; // 8 second timeout for API calls\n\n// Error class for Clay API errors\nclass ClayApiError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.name = 'ClayApiError';\n    this.statusCode = statusCode;\n  }\n}\n\n/**\n * Fetch connections from Clay CRM\n * @param {number} limit - Maximum number of connections to fetch\n * @param {number} offset - Offset for pagination\n * @returns {Promise<Array>} Array of connection objects\n */\nexport const fetchConnections = async (limit = 50, offset = 0) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    const response = await fetch(`${PROXY_URL}/connections?limit=${limit}&offset=${offset}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch connections: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay connections:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch recent activities from Clay CRM\n * @param {number} limit - Maximum number of activities to fetch\n * @returns {Promise<Array>} Array of activity objects\n */\nexport const fetchActivities = async (limit = 20) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    const response = await fetch(`${PROXY_URL}/activities?limit=${limit}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch activities: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay activities:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch networking metrics from Clay CRM\n * @returns {Promise<Object>} Metrics object\n */\nexport const fetchNetworkingMetrics = async () => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    const response = await fetch(`${PROXY_URL}/metrics`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch metrics: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay metrics:', error);\n    throw error;\n  }\n};\n\n/**\n * Connect to Clay CRM by authenticating with API key\n * @param {string} apiKey - Clay CRM API key\n * @returns {Promise<Object>} Connection status\n */\nexport const connectToClayApi = async apiKey => {\n  try {\n    const response = await fetch(`${PROXY_URL}/connect`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        apiKey\n      })\n    });\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to connect to Clay CRM: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error connecting to Clay CRM:', error);\n    throw error;\n  }\n};\n\n/**\n * Check connection status to Clay CRM\n * @returns {Promise<Object>} Connection status object\n */\nexport const checkClayConnection = async () => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // shorter timeout for status check\n\n    const response = await fetch(`${PROXY_URL}/status`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to check Clay connection: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error checking Clay connection:', error);\n    return {\n      connected: false,\n      error: error.message\n    };\n  }\n};\n\n/**\n * Add a new connection to Clay CRM\n * @param {Object} connectionData - Connection data\n * @returns {Promise<Object>} New connection object\n */\nexport const addConnection = async connectionData => {\n  try {\n    const response = await fetch(`${PROXY_URL}/connections`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(connectionData)\n    });\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to add connection: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding Clay connection:', error);\n    throw error;\n  }\n};\n\n/**\n * Get upcoming follow-ups from Clay CRM\n * @param {number} limit - Maximum number of follow-ups to fetch\n * @returns {Promise<Array>} Array of follow-up objects\n */\nexport const getUpcomingFollowUps = async (limit = 10) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    const response = await fetch(`${PROXY_URL}/follow-ups?limit=${limit}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    clearTimeout(timeoutId);\n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch follow-ups: ${response.statusText}`, response.status);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching follow-ups:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","PROXY_URL","API_TIMEOUT","ClayApiError","Error","constructor","message","statusCode","name","fetchConnections","limit","offset","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","method","headers","clearTimeout","ok","statusText","status","json","error","console","fetchActivities","fetchNetworkingMetrics","connectToClayApi","apiKey","body","JSON","stringify","checkClayConnection","connected","addConnection","connectionData","getUpcomingFollowUps"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/services/clayApi.js"],"sourcesContent":["/**\n * Clay CRM API service\n * Handles communication with the Clay CRM API\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst PROXY_URL = `${API_URL}/clay`;\nconst API_TIMEOUT = 8000; // 8 second timeout for API calls\n\n// Error class for Clay API errors\nclass ClayApiError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.name = 'ClayApiError';\n    this.statusCode = statusCode;\n  }\n}\n\n/**\n * Fetch connections from Clay CRM\n * @param {number} limit - Maximum number of connections to fetch\n * @param {number} offset - Offset for pagination\n * @returns {Promise<Array>} Array of connection objects\n */\nexport const fetchConnections = async (limit = 50, offset = 0) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    \n    const response = await fetch(`${PROXY_URL}/connections?limit=${limit}&offset=${offset}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch connections: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay connections:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch recent activities from Clay CRM\n * @param {number} limit - Maximum number of activities to fetch\n * @returns {Promise<Array>} Array of activity objects\n */\nexport const fetchActivities = async (limit = 20) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    \n    const response = await fetch(`${PROXY_URL}/activities?limit=${limit}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch activities: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay activities:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch networking metrics from Clay CRM\n * @returns {Promise<Object>} Metrics object\n */\nexport const fetchNetworkingMetrics = async () => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    \n    const response = await fetch(`${PROXY_URL}/metrics`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch metrics: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching Clay metrics:', error);\n    throw error;\n  }\n};\n\n/**\n * Connect to Clay CRM by authenticating with API key\n * @param {string} apiKey - Clay CRM API key\n * @returns {Promise<Object>} Connection status\n */\nexport const connectToClayApi = async (apiKey) => {\n  try {\n    const response = await fetch(`${PROXY_URL}/connect`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ apiKey }),\n    });\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to connect to Clay CRM: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error connecting to Clay CRM:', error);\n    throw error;\n  }\n};\n\n/**\n * Check connection status to Clay CRM\n * @returns {Promise<Object>} Connection status object\n */\nexport const checkClayConnection = async () => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // shorter timeout for status check\n    \n    const response = await fetch(`${PROXY_URL}/status`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to check Clay connection: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error checking Clay connection:', error);\n    return { connected: false, error: error.message };\n  }\n};\n\n/**\n * Add a new connection to Clay CRM\n * @param {Object} connectionData - Connection data\n * @returns {Promise<Object>} New connection object\n */\nexport const addConnection = async (connectionData) => {\n  try {\n    const response = await fetch(`${PROXY_URL}/connections`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(connectionData),\n    });\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to add connection: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error adding Clay connection:', error);\n    throw error;\n  }\n};\n\n/**\n * Get upcoming follow-ups from Clay CRM\n * @param {number} limit - Maximum number of follow-ups to fetch\n * @returns {Promise<Array>} Array of follow-up objects\n */\nexport const getUpcomingFollowUps = async (limit = 10) => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), API_TIMEOUT);\n    \n    const response = await fetch(`${PROXY_URL}/follow-ups?limit=${limit}`, {\n      signal: controller.signal,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    clearTimeout(timeoutId);\n    \n    if (!response.ok) {\n      throw new ClayApiError(`Failed to fetch follow-ups: ${response.statusText}`, response.status);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching follow-ups:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}