{"ast":null,"code":"import React from'react';/**\n * Demo mode context and provider\n * Provides demo mode state and utilities throughout the application\n */import{createContext,useContext,useEffect,useState}from'react';// Create context\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const DemoModeContext=/*#__PURE__*/createContext({isDemoMode:false,demoUser:null});/**\n * Demo mode provider component\n * Detects demo mode and provides context to child components\n */export const DemoModeProvider=_ref=>{let{children}=_ref;const[isDemoMode,setIsDemoMode]=useState(false);const[demoUser,setDemoUser]=useState(null);useEffect(()=>{// Check if we're in demo mode based on environment variable or URL\nconst checkDemoMode=()=>{// Check for environment variable\nconst envDemoMode=process.env.REACT_APP_DEMO_MODE==='true';// Check URL for demo parameter\nconst urlParams=new URLSearchParams(window.location.search);const urlDemoMode=urlParams.get('demo')==='true';// Check if domain is the demo domain\nconst demoHostnames=['devops-dashboard.joshuamichaelhall.com','devops-dashboard.onrender.com','joshuamichaelhall.github.io'];const isDemoDomain=demoHostnames.includes(window.location.hostname);// Force demo mode for certain paths\nconst isDemoPath=window.location.pathname.includes('/dashboard');// Set demo mode if any condition is true\nconst isDemo=envDemoMode||urlDemoMode||isDemoDomain||isDemoPath;console.log('Demo mode enabled:',isDemo,{envDemoMode,urlDemoMode,isDemoDomain,isDemoPath});setIsDemoMode(isDemo);// Set demo user for authenticated views\nconst demoUser={id:'demo-user',username:'demo',isDemoUser:true};localStorage.setItem('dashboard_user',JSON.stringify(demoUser));setDemoUser(demoUser);};checkDemoMode();},[]);// Demo mode context value\nconst value={isDemoMode,demoUser,isDemoUser:user=>user&&user.isDemoUser};return/*#__PURE__*/_jsx(DemoModeContext.Provider,{value:value,children:children});};/**\n * Hook to use demo mode context\n */export const useDemoMode=()=>{const context=useContext(DemoModeContext);if(!context){throw new Error('useDemoMode must be used within a DemoModeProvider');}return context;};/**\n * Watermark component for demo mode\n */export const DemoWatermark=()=>{const{isDemoMode}=useDemoMode();if(!isDemoMode)return null;return/*#__PURE__*/_jsxs(\"div\",{className:\"demo-watermark\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"DEMO\"}),/*#__PURE__*/_jsx(\"style\",{jsx:\"true\",children:\"\\n        .demo-watermark {\\n          position: fixed;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n          display: flex;\\n          align-items: center;\\n          justify-content: center;\\n          pointer-events: none;\\n          z-index: 100;\\n          user-select: none;\\n        }\\n        .demo-watermark span {\\n          font-size: 20vw;\\n          color: rgba(245, 54, 92, 0.05);\\n          font-weight: bold;\\n          transform: rotate(-45deg);\\n        }\\n      \"})]});};export default{DemoModeProvider,useDemoMode,DemoWatermark};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","jsxs","_jsxs","DemoModeContext","isDemoMode","demoUser","DemoModeProvider","_ref","children","setIsDemoMode","setDemoUser","checkDemoMode","envDemoMode","process","env","REACT_APP_DEMO_MODE","urlParams","URLSearchParams","window","location","search","urlDemoMode","get","demoHostnames","isDemoDomain","includes","hostname","isDemoPath","pathname","isDemo","console","log","id","username","isDemoUser","localStorage","setItem","JSON","stringify","value","user","Provider","useDemoMode","context","Error","DemoWatermark","className"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/components/DemoMode.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Demo mode context and provider\n * Provides demo mode state and utilities throughout the application\n */\nimport { createContext, useContext, useEffect, useState } from 'react';\n\n// Create context\nconst DemoModeContext = createContext({\n  isDemoMode: false,\n  demoUser: null\n});\n\n/**\n * Demo mode provider component\n * Detects demo mode and provides context to child components\n */\nexport const DemoModeProvider = ({ children }) => {\n  const [isDemoMode, setIsDemoMode] = useState(false);\n  const [demoUser, setDemoUser] = useState(null);\n  \n  useEffect(() => {\n    // Check if we're in demo mode based on environment variable or URL\n    const checkDemoMode = () => {\n      // Check for environment variable\n      const envDemoMode = process.env.REACT_APP_DEMO_MODE === 'true';\n      \n      // Check URL for demo parameter\n      const urlParams = new URLSearchParams(window.location.search);\n      const urlDemoMode = urlParams.get('demo') === 'true';\n      \n      // Check if domain is the demo domain\n      const demoHostnames = [\n        'devops-dashboard.joshuamichaelhall.com',\n        'devops-dashboard.onrender.com',\n        'joshuamichaelhall.github.io'\n      ];\n      const isDemoDomain = demoHostnames.includes(window.location.hostname);\n      \n      // Force demo mode for certain paths\n      const isDemoPath = window.location.pathname.includes('/dashboard');\n      \n      // Set demo mode if any condition is true\n      const isDemo = envDemoMode || urlDemoMode || isDemoDomain || isDemoPath;\n      console.log('Demo mode enabled:', isDemo, { envDemoMode, urlDemoMode, isDemoDomain, isDemoPath });\n      setIsDemoMode(isDemo);\n      \n      // Set demo user for authenticated views\n      const demoUser = {\n        id: 'demo-user',\n        username: 'demo',\n        isDemoUser: true\n      };\n      localStorage.setItem('dashboard_user', JSON.stringify(demoUser));\n      setDemoUser(demoUser);\n    };\n    \n    checkDemoMode();\n  }, []);\n  \n  // Demo mode context value\n  const value = {\n    isDemoMode,\n    demoUser,\n    isDemoUser: (user) => user && user.isDemoUser\n  };\n  \n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n};\n\n/**\n * Hook to use demo mode context\n */\nexport const useDemoMode = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoMode must be used within a DemoModeProvider');\n  }\n  return context;\n};\n\n/**\n * Watermark component for demo mode\n */\nexport const DemoWatermark = () => {\n  const { isDemoMode } = useDemoMode();\n  \n  if (!isDemoMode) return null;\n  \n  return (\n    <div className=\"demo-watermark\">\n      <span>DEMO</span>\n      \n      <style jsx=\"true\">{`\n        .demo-watermark {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          pointer-events: none;\n          z-index: 100;\n          user-select: none;\n        }\n        .demo-watermark span {\n          font-size: 20vw;\n          color: rgba(245, 54, 92, 0.05);\n          font-weight: bold;\n          transform: rotate(-45deg);\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default { DemoModeProvider, useDemoMode, DemoWatermark };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}