{"ast":null,"code":"var _jsxFileName = \"/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/context/DashboardContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { fetchDashboardData, updateTaskStatus, logTime, updateDashboardSection, addLearningResource as apiAddLearningResource, updateLearningResource as apiUpdateLearningResource } from '../services/api';\n// Import local data dynamically to avoid issues with relative paths\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dashboardData = require('../data/data.json');\n\n// Create context\nconst DashboardContext = /*#__PURE__*/createContext();\n\n// Hook to use the dashboard context\nexport const useDashboard = () => {\n  _s();\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error('useDashboard must be used within a DashboardProvider');\n  }\n  return context;\n};\n\n// Provider component\n_s(useDashboard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const DashboardProvider = ({\n  children\n}) => {\n  _s2();\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load initial data\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        // Try to fetch from API first\n        try {\n          const data = await fetchDashboardData();\n          setDashboardData(data);\n          setError(null);\n        } catch (apiErr) {\n          // If API fails, use local data as fallback\n          console.warn('API fetch failed, using local data:', apiErr);\n          setDashboardData(dashboardData);\n          setError(null);\n        }\n      } catch (err) {\n        setError('Failed to load dashboard data');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  // Complete a task\n  const completeTask = async (taskId, isCompleted) => {\n    try {\n      setLoading(true);\n      const result = await updateTaskStatus(taskId, isCompleted);\n\n      // Update local state\n      setDashboardData(prevData => {\n        const updatedGoals = prevData.goals.map(goal => goal.content === taskId ? {\n          ...goal,\n          completed: isCompleted\n        } : goal);\n        return {\n          ...prevData,\n          goals: updatedGoals,\n          overview: {\n            ...prevData.overview,\n            completedGoals: isCompleted ? prevData.overview.completedGoals + 1 : prevData.overview.completedGoals - 1,\n            goalCompletionRate: Math.round((isCompleted ? prevData.overview.completedGoals + 1 : prevData.overview.completedGoals - 1) * 100 / prevData.overview.totalGoals)\n          }\n        };\n      });\n      return result;\n    } catch (err) {\n      setError('Failed to update task');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async (taskContent, category, dueDate) => {\n    try {\n      setLoading(true);\n\n      // Create the new task object\n      const newTask = {\n        content: taskContent,\n        category,\n        dueDate,\n        completed: false\n      };\n\n      // Update local state first\n      const updatedGoals = [...dashboardData.goals, newTask];\n\n      // Update the goals section\n      const result = await updateDashboardSection('goals', updatedGoals);\n\n      // Also update the overview section for total goals\n      await updateDashboardSection('overview', {\n        ...dashboardData.overview,\n        totalGoals: dashboardData.overview.totalGoals + 1,\n        goalCompletionRate: Math.round(dashboardData.overview.completedGoals * 100 / (dashboardData.overview.totalGoals + 1))\n      });\n\n      // Update local state with the backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        goals: updatedGoals,\n        overview: {\n          ...prevData.overview,\n          totalGoals: prevData.overview.totalGoals + 1,\n          goalCompletionRate: Math.round(prevData.overview.completedGoals * 100 / (prevData.overview.totalGoals + 1))\n        }\n      }));\n      return result;\n    } catch (err) {\n      setError('Failed to add task');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Log time for a category\n  const logTimeEntry = async (category, hours, date) => {\n    try {\n      setLoading(true);\n      const result = await logTime(category, hours, date);\n\n      // Update local state\n      setDashboardData(prevData => {\n        const categoryKey = `${category.toLowerCase()}Hours`;\n        return {\n          ...prevData,\n          weeklyMetrics: {\n            ...prevData.weeklyMetrics,\n            [categoryKey]: prevData.weeklyMetrics[categoryKey] + parseInt(hours),\n            totalHours: prevData.weeklyMetrics.totalHours + parseInt(hours)\n          }\n        };\n      });\n      return result;\n    } catch (err) {\n      setError('Failed to log time');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update project progress\n  const updateProjectProgress = async (projectName, progress) => {\n    try {\n      setLoading(true);\n\n      // Update local state first\n      const updatedProjects = dashboardData.projects.map(project => project.name === projectName ? {\n        ...project,\n        progress\n      } : project);\n\n      // Update backend\n      const result = await updateDashboardSection('projects', updatedProjects);\n\n      // Update local state with backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        projects: updatedProjects\n      }));\n      return result;\n    } catch (err) {\n      setError('Failed to update project progress');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update certification progress\n  const updateCertificationProgress = async (certName, progress, status) => {\n    try {\n      setLoading(true);\n\n      // Update local state first\n      const updatedCertifications = dashboardData.certifications.map(cert => cert.name === certName ? {\n        ...cert,\n        progress,\n        status\n      } : cert);\n\n      // Update backend\n      const result = await updateDashboardSection('certifications', updatedCertifications);\n\n      // Update local state with backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        certifications: updatedCertifications\n      }));\n      return result;\n    } catch (err) {\n      setError('Failed to update certification progress');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update skills list\n  const updateSkills = async (categoryName, newSkill, proficiency) => {\n    try {\n      setLoading(true);\n\n      // Find the category\n      const categoryIndex = dashboardData.skills.findIndex(c => c.category === categoryName);\n      if (categoryIndex === -1) {\n        setError(`Category \"${categoryName}\" not found`);\n        return;\n      }\n\n      // Update skills array\n      const updatedSkills = [...dashboardData.skills];\n\n      // Add the skill if it doesn't exist\n      if (newSkill && !updatedSkills[categoryIndex].skills.includes(newSkill)) {\n        updatedSkills[categoryIndex].skills.push(newSkill);\n      }\n\n      // Update proficiency if provided\n      if (proficiency) {\n        updatedSkills[categoryIndex].proficiency = proficiency;\n      }\n\n      // Update backend\n      const result = await updateDashboardSection('skills', updatedSkills);\n\n      // Update local state\n      setDashboardData(prevData => ({\n        ...prevData,\n        skills: updatedSkills\n      }));\n      return result;\n    } catch (err) {\n      setError('Failed to update skills');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a learning resource\n  const addLearningResource = async resourceData => {\n    try {\n      setLoading(true);\n\n      // Try to add via API\n      try {\n        const result = await apiAddLearningResource(resourceData);\n\n        // Update local state\n        setDashboardData(prevData => ({\n          ...prevData,\n          learningResources: [...(prevData.learningResources || []), result.resource]\n        }));\n        return result;\n      } catch (apiErr) {\n        console.warn('API failed, updating local state only:', apiErr);\n\n        // Fallback: Update local state only\n        const newResource = {\n          id: Date.now().toString(),\n          ...resourceData,\n          progress: 0,\n          dateAdded: new Date().toISOString().split('T')[0]\n        };\n        setDashboardData(prevData => ({\n          ...prevData,\n          learningResources: [...(prevData.learningResources || []), newResource]\n        }));\n        return {\n          success: true,\n          resource: newResource\n        };\n      }\n    } catch (err) {\n      setError('Failed to add learning resource');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update a learning resource\n  const updateLearningResource = async (id, updates) => {\n    try {\n      setLoading(true);\n\n      // Try to update via API\n      try {\n        const result = await apiUpdateLearningResource(id, updates);\n\n        // Update local state\n        setDashboardData(prevData => {\n          const updatedResources = prevData.learningResources.map(resource => resource.id === id ? {\n            ...resource,\n            ...updates\n          } : resource);\n          return {\n            ...prevData,\n            learningResources: updatedResources\n          };\n        });\n        return result;\n      } catch (apiErr) {\n        console.warn('API failed, updating local state only:', apiErr);\n\n        // Fallback: Update local state only\n        setDashboardData(prevData => {\n          const updatedResources = prevData.learningResources.map(resource => resource.id === id ? {\n            ...resource,\n            ...updates\n          } : resource);\n          return {\n            ...prevData,\n            learningResources: updatedResources\n          };\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (err) {\n      setError('Failed to update learning resource');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update career roadmap configuration\n  const updateRoadmapConfig = async (roadmapType, phases, title, description) => {\n    try {\n      setLoading(true);\n\n      // Update careerPhases in backend\n      const phasesResult = await updateDashboardSection('careerPhases', phases);\n\n      // Update overview to include roadmap title and description\n      const updatedOverview = {\n        ...dashboardData.overview,\n        roadmapTitle: title,\n        roadmapDescription: description\n      };\n      const overviewResult = await updateDashboardSection('overview', updatedOverview);\n\n      // Update local state\n      setDashboardData(prevData => ({\n        ...prevData,\n        careerPhases: phases,\n        overview: {\n          ...prevData.overview,\n          roadmapTitle: title,\n          roadmapDescription: description\n        }\n      }));\n      return {\n        success: true,\n        phasesResult,\n        overviewResult\n      };\n    } catch (err) {\n      setError('Failed to update roadmap configuration');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    dashboardData,\n    loading,\n    error,\n    completeTask,\n    addTask,\n    logTimeEntry,\n    updateProjectProgress,\n    updateCertificationProgress,\n    updateSkills,\n    addLearningResource,\n    updateLearningResource,\n    updateRoadmapConfig,\n    refreshData: async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        try {\n          // Clear both localStorage and sessionStorage caches\n          localStorage.removeItem('dashboard_data_cache');\n          sessionStorage.removeItem('dashboard_data_cache');\n\n          // Clear any application cache\n          if ('caches' in window) {\n            try {\n              const cacheKeys = await caches.keys();\n              await Promise.all(cacheKeys.filter(key => key.includes('dashboard')).map(key => caches.delete(key)));\n            } catch (cacheErr) {\n              console.warn('Failed to clear application cache:', cacheErr);\n            }\n          }\n\n          // Try to fetch fresh data from API\n          console.log('Attempting to fetch fresh dashboard data...');\n          const data = await fetchDashboardData({\n            nocache: Date.now()\n          });\n          if (!data) {\n            throw new Error('Received empty data from API');\n          }\n          console.log('Successfully loaded dashboard data');\n          setDashboardData(data);\n\n          // Force reload the page to clear any component-level cached state\n          window.location.reload();\n        } catch (apiErr) {\n          console.warn('API refresh failed:', apiErr);\n\n          // Force browser reload \n          window.location.reload();\n        }\n      } catch (err) {\n        console.error('Critical error during refresh:', err);\n        setError('Failed to refresh dashboard data: ' + (err.message || 'Unknown error'));\n        // Still attempt to reload the page\n        window.location.reload();\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 5\n  }, this);\n};\n_s2(DashboardProvider, \"sxFeAcwAVC244uU+brsBFLqW91s=\");\n_c = DashboardProvider;\nvar _c;\n$RefreshReg$(_c, \"DashboardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fetchDashboardData","updateTaskStatus","logTime","updateDashboardSection","addLearningResource","apiAddLearningResource","updateLearningResource","apiUpdateLearningResource","jsxDEV","_jsxDEV","dashboardData","require","DashboardContext","useDashboard","_s","context","Error","DashboardProvider","children","_s2","setDashboardData","loading","setLoading","error","setError","loadData","data","apiErr","console","warn","err","completeTask","taskId","isCompleted","result","prevData","updatedGoals","goals","map","goal","content","completed","overview","completedGoals","goalCompletionRate","Math","round","totalGoals","addTask","taskContent","category","dueDate","newTask","logTimeEntry","hours","date","categoryKey","toLowerCase","weeklyMetrics","parseInt","totalHours","updateProjectProgress","projectName","progress","updatedProjects","projects","project","name","updateCertificationProgress","certName","status","updatedCertifications","certifications","cert","updateSkills","categoryName","newSkill","proficiency","categoryIndex","skills","findIndex","c","updatedSkills","includes","push","resourceData","learningResources","resource","newResource","id","Date","now","toString","dateAdded","toISOString","split","success","updates","updatedResources","updateRoadmapConfig","roadmapType","phases","title","description","phasesResult","updatedOverview","roadmapTitle","roadmapDescription","overviewResult","careerPhases","value","refreshData","localStorage","removeItem","sessionStorage","window","cacheKeys","caches","keys","Promise","all","filter","key","delete","cacheErr","log","nocache","location","reload","message","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/context/DashboardContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  fetchDashboardData, \n  updateTaskStatus, \n  logTime, \n  updateDashboardSection,\n  addLearningResource as apiAddLearningResource,\n  updateLearningResource as apiUpdateLearningResource\n} from '../services/api';\n// Import local data dynamically to avoid issues with relative paths\nconst dashboardData = require('../data/data.json');\n\n// Create context\nconst DashboardContext = createContext();\n\n// Hook to use the dashboard context\nexport const useDashboard = () => {\n  const context = useContext(DashboardContext);\n  if (!context) {\n    throw new Error('useDashboard must be used within a DashboardProvider');\n  }\n  return context;\n};\n\n// Provider component\nexport const DashboardProvider = ({ children }) => {\n  const [dashboardData, setDashboardData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load initial data\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        // Try to fetch from API first\n        try {\n          const data = await fetchDashboardData();\n          setDashboardData(data);\n          setError(null);\n        } catch (apiErr) {\n          // If API fails, use local data as fallback\n          console.warn('API fetch failed, using local data:', apiErr);\n          setDashboardData(dashboardData);\n          setError(null);\n        }\n      } catch (err) {\n        setError('Failed to load dashboard data');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  // Complete a task\n  const completeTask = async (taskId, isCompleted) => {\n    try {\n      setLoading(true);\n      const result = await updateTaskStatus(taskId, isCompleted);\n      \n      // Update local state\n      setDashboardData(prevData => {\n        const updatedGoals = prevData.goals.map(goal => \n          goal.content === taskId ? { ...goal, completed: isCompleted } : goal\n        );\n        \n        return {\n          ...prevData,\n          goals: updatedGoals,\n          overview: {\n            ...prevData.overview,\n            completedGoals: isCompleted \n              ? prevData.overview.completedGoals + 1 \n              : prevData.overview.completedGoals - 1,\n            goalCompletionRate: Math.round(\n              (isCompleted \n                ? prevData.overview.completedGoals + 1 \n                : prevData.overview.completedGoals - 1) * 100 / prevData.overview.totalGoals\n            )\n          }\n        };\n      });\n      \n      return result;\n    } catch (err) {\n      setError('Failed to update task');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add a new task\n  const addTask = async (taskContent, category, dueDate) => {\n    try {\n      setLoading(true);\n      \n      // Create the new task object\n      const newTask = {\n        content: taskContent,\n        category,\n        dueDate,\n        completed: false\n      };\n      \n      // Update local state first\n      const updatedGoals = [...dashboardData.goals, newTask];\n      \n      // Update the goals section\n      const result = await updateDashboardSection('goals', updatedGoals);\n      \n      // Also update the overview section for total goals\n      await updateDashboardSection('overview', {\n        ...dashboardData.overview,\n        totalGoals: dashboardData.overview.totalGoals + 1,\n        goalCompletionRate: Math.round(\n          dashboardData.overview.completedGoals * 100 / (dashboardData.overview.totalGoals + 1)\n        )\n      });\n      \n      // Update local state with the backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        goals: updatedGoals,\n        overview: {\n          ...prevData.overview,\n          totalGoals: prevData.overview.totalGoals + 1,\n          goalCompletionRate: Math.round(\n            prevData.overview.completedGoals * 100 / (prevData.overview.totalGoals + 1)\n          )\n        }\n      }));\n      \n      return result;\n    } catch (err) {\n      setError('Failed to add task');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Log time for a category\n  const logTimeEntry = async (category, hours, date) => {\n    try {\n      setLoading(true);\n      const result = await logTime(category, hours, date);\n      \n      // Update local state\n      setDashboardData(prevData => {\n        const categoryKey = `${category.toLowerCase()}Hours`;\n        \n        return {\n          ...prevData,\n          weeklyMetrics: {\n            ...prevData.weeklyMetrics,\n            [categoryKey]: prevData.weeklyMetrics[categoryKey] + parseInt(hours),\n            totalHours: prevData.weeklyMetrics.totalHours + parseInt(hours)\n          }\n        };\n      });\n      \n      return result;\n    } catch (err) {\n      setError('Failed to log time');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update project progress\n  const updateProjectProgress = async (projectName, progress) => {\n    try {\n      setLoading(true);\n      \n      // Update local state first\n      const updatedProjects = dashboardData.projects.map(project => \n        project.name === projectName ? { ...project, progress } : project\n      );\n      \n      // Update backend\n      const result = await updateDashboardSection('projects', updatedProjects);\n      \n      // Update local state with backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        projects: updatedProjects\n      }));\n      \n      return result;\n    } catch (err) {\n      setError('Failed to update project progress');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update certification progress\n  const updateCertificationProgress = async (certName, progress, status) => {\n    try {\n      setLoading(true);\n      \n      // Update local state first\n      const updatedCertifications = dashboardData.certifications.map(cert => \n        cert.name === certName ? { ...cert, progress, status } : cert\n      );\n      \n      // Update backend\n      const result = await updateDashboardSection('certifications', updatedCertifications);\n      \n      // Update local state with backend response\n      setDashboardData(prevData => ({\n        ...prevData,\n        certifications: updatedCertifications\n      }));\n      \n      return result;\n    } catch (err) {\n      setError('Failed to update certification progress');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update skills list\n  const updateSkills = async (categoryName, newSkill, proficiency) => {\n    try {\n      setLoading(true);\n      \n      // Find the category\n      const categoryIndex = dashboardData.skills.findIndex(c => c.category === categoryName);\n      \n      if (categoryIndex === -1) {\n        setError(`Category \"${categoryName}\" not found`);\n        return;\n      }\n      \n      // Update skills array\n      const updatedSkills = [...dashboardData.skills];\n      \n      // Add the skill if it doesn't exist\n      if (newSkill && !updatedSkills[categoryIndex].skills.includes(newSkill)) {\n        updatedSkills[categoryIndex].skills.push(newSkill);\n      }\n      \n      // Update proficiency if provided\n      if (proficiency) {\n        updatedSkills[categoryIndex].proficiency = proficiency;\n      }\n      \n      // Update backend\n      const result = await updateDashboardSection('skills', updatedSkills);\n      \n      // Update local state\n      setDashboardData(prevData => ({\n        ...prevData,\n        skills: updatedSkills\n      }));\n      \n      return result;\n    } catch (err) {\n      setError('Failed to update skills');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Add a learning resource\n  const addLearningResource = async (resourceData) => {\n    try {\n      setLoading(true);\n      \n      // Try to add via API\n      try {\n        const result = await apiAddLearningResource(resourceData);\n        \n        // Update local state\n        setDashboardData(prevData => ({\n          ...prevData,\n          learningResources: [...(prevData.learningResources || []), result.resource]\n        }));\n        \n        return result;\n      } catch (apiErr) {\n        console.warn('API failed, updating local state only:', apiErr);\n        \n        // Fallback: Update local state only\n        const newResource = {\n          id: Date.now().toString(),\n          ...resourceData,\n          progress: 0,\n          dateAdded: new Date().toISOString().split('T')[0]\n        };\n        \n        setDashboardData(prevData => ({\n          ...prevData,\n          learningResources: [...(prevData.learningResources || []), newResource]\n        }));\n        \n        return { success: true, resource: newResource };\n      }\n    } catch (err) {\n      setError('Failed to add learning resource');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Update a learning resource\n  const updateLearningResource = async (id, updates) => {\n    try {\n      setLoading(true);\n      \n      // Try to update via API\n      try {\n        const result = await apiUpdateLearningResource(id, updates);\n        \n        // Update local state\n        setDashboardData(prevData => {\n          const updatedResources = prevData.learningResources.map(resource => \n            resource.id === id ? { ...resource, ...updates } : resource\n          );\n          \n          return {\n            ...prevData,\n            learningResources: updatedResources\n          };\n        });\n        \n        return result;\n      } catch (apiErr) {\n        console.warn('API failed, updating local state only:', apiErr);\n        \n        // Fallback: Update local state only\n        setDashboardData(prevData => {\n          const updatedResources = prevData.learningResources.map(resource => \n            resource.id === id ? { ...resource, ...updates } : resource\n          );\n          \n          return {\n            ...prevData,\n            learningResources: updatedResources\n          };\n        });\n        \n        return { success: true };\n      }\n    } catch (err) {\n      setError('Failed to update learning resource');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update career roadmap configuration\n  const updateRoadmapConfig = async (roadmapType, phases, title, description) => {\n    try {\n      setLoading(true);\n      \n      // Update careerPhases in backend\n      const phasesResult = await updateDashboardSection('careerPhases', phases);\n      \n      // Update overview to include roadmap title and description\n      const updatedOverview = {\n        ...dashboardData.overview,\n        roadmapTitle: title,\n        roadmapDescription: description\n      };\n      \n      const overviewResult = await updateDashboardSection('overview', updatedOverview);\n      \n      // Update local state\n      setDashboardData(prevData => ({\n        ...prevData,\n        careerPhases: phases,\n        overview: {\n          ...prevData.overview,\n          roadmapTitle: title,\n          roadmapDescription: description\n        }\n      }));\n      \n      return { success: true, phasesResult, overviewResult };\n    } catch (err) {\n      setError('Failed to update roadmap configuration');\n      console.error(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    dashboardData,\n    loading,\n    error,\n    completeTask,\n    addTask,\n    logTimeEntry,\n    updateProjectProgress,\n    updateCertificationProgress,\n    updateSkills,\n    addLearningResource,\n    updateLearningResource,\n    updateRoadmapConfig,\n    refreshData: async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        try {\n          // Clear both localStorage and sessionStorage caches\n          localStorage.removeItem('dashboard_data_cache');\n          sessionStorage.removeItem('dashboard_data_cache');\n          \n          // Clear any application cache\n          if ('caches' in window) {\n            try {\n              const cacheKeys = await caches.keys();\n              await Promise.all(\n                cacheKeys.filter(key => key.includes('dashboard')).map(key => caches.delete(key))\n              );\n            } catch (cacheErr) {\n              console.warn('Failed to clear application cache:', cacheErr);\n            }\n          }\n          \n          // Try to fetch fresh data from API\n          console.log('Attempting to fetch fresh dashboard data...');\n          const data = await fetchDashboardData({ nocache: Date.now() });\n          \n          if (!data) {\n            throw new Error('Received empty data from API');\n          }\n          \n          console.log('Successfully loaded dashboard data');\n          setDashboardData(data);\n          \n          // Force reload the page to clear any component-level cached state\n          window.location.reload();\n        } catch (apiErr) {\n          console.warn('API refresh failed:', apiErr);\n          \n          // Force browser reload \n          window.location.reload();\n        }\n      } catch (err) {\n        console.error('Critical error during refresh:', err);\n        setError('Failed to refresh dashboard data: ' + (err.message || 'Unknown error'));\n        // Still attempt to reload the page\n        window.location.reload();\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <DashboardContext.Provider value={value}>\n      {children}\n    </DashboardContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}