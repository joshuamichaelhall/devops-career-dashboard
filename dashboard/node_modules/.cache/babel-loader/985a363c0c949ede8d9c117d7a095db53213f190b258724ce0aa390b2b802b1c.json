{"ast":null,"code":"/**\n * Projects Template Generator\n * Provides suggested projects based on track and career stage\n */\n\n// Define project templates for different tracks\nconst projectTemplates = {\n  // AWS/Cloud track projects\n  aws: [{\n    name: \"AWS Cloud Resume Challenge\",\n    description: \"Create a personal resume website using various AWS services including S3, CloudFront, Lambda, API Gateway, DynamoDB, and deploy with CI/CD.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"AWS S3\", \"CloudFront\", \"Lambda\", \"API Gateway\", \"DynamoDB\", \"GitHub Actions\"],\n    targetDate: \"\",\n    difficulty: \"Beginner\",\n    resourceUrl: \"https://cloudresumechallenge.dev/\"\n  }, {\n    name: \"Serverless Data Processing Pipeline\",\n    description: \"Build a data processing pipeline using AWS Lambda, S3, and SQS to process, transform, and analyze datasets automatically.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"AWS Lambda\", \"S3\", \"SQS\", \"EventBridge\", \"CloudWatch\"],\n    targetDate: \"\",\n    difficulty: \"Intermediate\",\n    resourceUrl: \"\"\n  }, {\n    name: \"Multi-Region Highly Available Website\",\n    description: \"Create a fault-tolerant website architecture across multiple AWS regions with automated failover and global load balancing.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"AWS EC2\", \"RDS\", \"Route 53\", \"CloudFront\", \"S3\", \"DynamoDB Global Tables\"],\n    targetDate: \"\",\n    difficulty: \"Advanced\",\n    resourceUrl: \"\"\n  }],\n  // Kubernetes track projects\n  kubernetes: [{\n    name: \"Basic Kubernetes Portfolio Deployment\",\n    description: \"Deploy a personal portfolio website on Kubernetes with basic resources and understand pod lifecycle.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"Docker\", \"Kubernetes\", \"NGINX\", \"GitHub Actions\"],\n    targetDate: \"\",\n    difficulty: \"Beginner\",\n    resourceUrl: \"\"\n  }, {\n    name: \"Microservices Application with Kubernetes\",\n    description: \"Build and deploy a multi-service application with proper service discovery, configuration, and scaling.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"Kubernetes\", \"Helm\", \"Microservices\", \"Service Mesh\", \"ConfigMaps\", \"Secrets\"],\n    targetDate: \"\",\n    difficulty: \"Intermediate\",\n    resourceUrl: \"\"\n  }, {\n    name: \"Custom Kubernetes Operator\",\n    description: \"Develop a custom Kubernetes operator to automate application lifecycle management for a specific workload.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"Kubernetes\", \"Go\", \"Operator SDK\", \"CRDs\", \"RBAC\"],\n    targetDate: \"\",\n    difficulty: \"Advanced\",\n    resourceUrl: \"\"\n  }],\n  // General DevOps projects\n  devops: [{\n    name: \"CI/CD Pipeline for a Web Application\",\n    description: \"Create an end-to-end CI/CD pipeline that automates testing, building, and deployment for a web application.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"GitHub Actions\", \"Docker\", \"Terraform\", \"AWS/GCP\", \"Testing Frameworks\"],\n    targetDate: \"\",\n    difficulty: \"Beginner\",\n    resourceUrl: \"\"\n  }, {\n    name: \"Infrastructure as Code Project\",\n    description: \"Define complete infrastructure using Terraform, including networking, compute, storage, and security components.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"Terraform\", \"AWS/GCP/Azure\", \"Modules\", \"State Management\", \"CI/CD\"],\n    targetDate: \"\",\n    difficulty: \"Intermediate\",\n    resourceUrl: \"\"\n  }, {\n    name: \"Monitoring and Alerting System\",\n    description: \"Set up a comprehensive monitoring and alerting system using Prometheus, Grafana, and other tools to track system and application metrics.\",\n    status: \"Planned\",\n    progress: 0,\n    technologies: [\"Prometheus\", \"Grafana\", \"AlertManager\", \"Exporters\", \"Kubernetes/Docker\"],\n    targetDate: \"\",\n    difficulty: \"Advanced\",\n    resourceUrl: \"\"\n  }]\n};\n\n/**\n * Get suggested projects based on track\n * @param {string} track - aws, kubernetes, or devops\n * @param {string} difficultyLevel - beginner, intermediate, or advanced\n * @returns {Array} Array of project objects\n */\nexport const getSuggestedProjects = (track = 'devops', difficultyLevel = 'all') => {\n  // Get projects for the specified track (default to devops if track not found)\n  const trackProjects = projectTemplates[track] || projectTemplates.devops;\n\n  // Filter by difficulty if specified\n  if (difficultyLevel !== 'all') {\n    return trackProjects.filter(project => project.difficulty.toLowerCase() === difficultyLevel.toLowerCase());\n  }\n  return trackProjects;\n};\n\n/**\n * Get all available projects across all tracks\n * @returns {Array} Array of all project templates\n */\nexport const getAllProjects = () => {\n  return [...projectTemplates.aws, ...projectTemplates.kubernetes, ...projectTemplates.devops];\n};\nexport default {\n  getSuggestedProjects,\n  getAllProjects\n};","map":{"version":3,"names":["projectTemplates","aws","name","description","status","progress","technologies","targetDate","difficulty","resourceUrl","kubernetes","devops","getSuggestedProjects","track","difficultyLevel","trackProjects","filter","project","toLowerCase","getAllProjects"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/data/templates/projects-template.js"],"sourcesContent":["/**\n * Projects Template Generator\n * Provides suggested projects based on track and career stage\n */\n\n// Define project templates for different tracks\nconst projectTemplates = {\n  // AWS/Cloud track projects\n  aws: [\n    {\n      name: \"AWS Cloud Resume Challenge\",\n      description: \"Create a personal resume website using various AWS services including S3, CloudFront, Lambda, API Gateway, DynamoDB, and deploy with CI/CD.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"AWS S3\", \"CloudFront\", \"Lambda\", \"API Gateway\", \"DynamoDB\", \"GitHub Actions\"],\n      targetDate: \"\",\n      difficulty: \"Beginner\",\n      resourceUrl: \"https://cloudresumechallenge.dev/\"\n    },\n    {\n      name: \"Serverless Data Processing Pipeline\",\n      description: \"Build a data processing pipeline using AWS Lambda, S3, and SQS to process, transform, and analyze datasets automatically.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"AWS Lambda\", \"S3\", \"SQS\", \"EventBridge\", \"CloudWatch\"],\n      targetDate: \"\",\n      difficulty: \"Intermediate\",\n      resourceUrl: \"\"\n    },\n    {\n      name: \"Multi-Region Highly Available Website\",\n      description: \"Create a fault-tolerant website architecture across multiple AWS regions with automated failover and global load balancing.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"AWS EC2\", \"RDS\", \"Route 53\", \"CloudFront\", \"S3\", \"DynamoDB Global Tables\"],\n      targetDate: \"\",\n      difficulty: \"Advanced\",\n      resourceUrl: \"\"\n    }\n  ],\n  \n  // Kubernetes track projects\n  kubernetes: [\n    {\n      name: \"Basic Kubernetes Portfolio Deployment\",\n      description: \"Deploy a personal portfolio website on Kubernetes with basic resources and understand pod lifecycle.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"Docker\", \"Kubernetes\", \"NGINX\", \"GitHub Actions\"],\n      targetDate: \"\",\n      difficulty: \"Beginner\",\n      resourceUrl: \"\"\n    },\n    {\n      name: \"Microservices Application with Kubernetes\",\n      description: \"Build and deploy a multi-service application with proper service discovery, configuration, and scaling.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"Kubernetes\", \"Helm\", \"Microservices\", \"Service Mesh\", \"ConfigMaps\", \"Secrets\"],\n      targetDate: \"\",\n      difficulty: \"Intermediate\",\n      resourceUrl: \"\"\n    },\n    {\n      name: \"Custom Kubernetes Operator\",\n      description: \"Develop a custom Kubernetes operator to automate application lifecycle management for a specific workload.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"Kubernetes\", \"Go\", \"Operator SDK\", \"CRDs\", \"RBAC\"],\n      targetDate: \"\",\n      difficulty: \"Advanced\",\n      resourceUrl: \"\"\n    }\n  ],\n  \n  // General DevOps projects\n  devops: [\n    {\n      name: \"CI/CD Pipeline for a Web Application\",\n      description: \"Create an end-to-end CI/CD pipeline that automates testing, building, and deployment for a web application.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"GitHub Actions\", \"Docker\", \"Terraform\", \"AWS/GCP\", \"Testing Frameworks\"],\n      targetDate: \"\",\n      difficulty: \"Beginner\",\n      resourceUrl: \"\"\n    },\n    {\n      name: \"Infrastructure as Code Project\",\n      description: \"Define complete infrastructure using Terraform, including networking, compute, storage, and security components.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"Terraform\", \"AWS/GCP/Azure\", \"Modules\", \"State Management\", \"CI/CD\"],\n      targetDate: \"\",\n      difficulty: \"Intermediate\",\n      resourceUrl: \"\"\n    },\n    {\n      name: \"Monitoring and Alerting System\",\n      description: \"Set up a comprehensive monitoring and alerting system using Prometheus, Grafana, and other tools to track system and application metrics.\",\n      status: \"Planned\",\n      progress: 0,\n      technologies: [\"Prometheus\", \"Grafana\", \"AlertManager\", \"Exporters\", \"Kubernetes/Docker\"],\n      targetDate: \"\",\n      difficulty: \"Advanced\",\n      resourceUrl: \"\"\n    }\n  ]\n};\n\n/**\n * Get suggested projects based on track\n * @param {string} track - aws, kubernetes, or devops\n * @param {string} difficultyLevel - beginner, intermediate, or advanced\n * @returns {Array} Array of project objects\n */\nexport const getSuggestedProjects = (track = 'devops', difficultyLevel = 'all') => {\n  // Get projects for the specified track (default to devops if track not found)\n  const trackProjects = projectTemplates[track] || projectTemplates.devops;\n  \n  // Filter by difficulty if specified\n  if (difficultyLevel !== 'all') {\n    return trackProjects.filter(project => \n      project.difficulty.toLowerCase() === difficultyLevel.toLowerCase()\n    );\n  }\n  \n  return trackProjects;\n};\n\n/**\n * Get all available projects across all tracks\n * @returns {Array} Array of all project templates\n */\nexport const getAllProjects = () => {\n  return [\n    ...projectTemplates.aws,\n    ...projectTemplates.kubernetes,\n    ...projectTemplates.devops\n  ];\n};\n\nexport default {\n  getSuggestedProjects,\n  getAllProjects\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}