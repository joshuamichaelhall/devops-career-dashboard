{"ast":null,"code":"/**\n * API service for dashboard data\n * Uses authFetch to secure API requests\n */\n\nimport { authFetch } from './authService';\n\n// Determine API URL based on hostname\nlet apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3005/api';\nif (window.location.hostname === 'devops-dashboard.joshuamichaelhall.com') {\n  apiBaseUrl = 'https://devops-dashboard.joshuamichaelhall.com';\n}\n// Avoid double /api in the URL\nconst API_URL = apiBaseUrl.includes('/api') ? apiBaseUrl : `${apiBaseUrl}/api`;\n\n// DEMO MODE FLAG\nconst DEMO_MODE = process.env.REACT_APP_DEMO_MODE === 'true';\n\n/**\n * Fetch dashboard data\n * @returns {Promise<Object>} Dashboard data\n */\nexport const fetchDashboardData = async () => {\n  try {\n    const response = await authFetch(`${API_URL}/dashboard/data`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard data: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n\n    // Attempt to load data from appropriate source\n    try {\n      // In demo mode, use demo data\n      if (DEMO_MODE) {\n        console.log('Loading demo data as fallback...');\n        return require('../data/demo-data.json');\n      }\n\n      // In personal mode, try to load directly from data.json\n      console.log('Loading local data file as fallback...');\n      return require('../data/data.json');\n    } catch (fallbackError) {\n      console.error('Failed to load fallback data:', fallbackError);\n      throw error; // Throw the original error\n    }\n  }\n};\n\n/**\n * Update dashboard data\n * @param {Object} data - New dashboard data\n * @returns {Promise<Object>} Result of update\n */\nexport const updateDashboardData = async data => {\n  try {\n    if (DEMO_MODE) {\n      console.log('DEMO MODE: Simulating dashboard update');\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/data`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update dashboard data: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating dashboard data:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update a specific section of dashboard data\n * @param {string} section - Section name\n * @param {Object} data - New section data\n * @returns {Promise<Object>} Result of update\n */\nexport const updateSection = async (section, data) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating update to ${section} section`);\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/data/${section}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update ${section}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating ${section}:`, error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update a specific dashboard section\n * Added for compatibility with DashboardContext\n */\nexport const updateDashboardSection = async (section, data) => {\n  return updateSection(section, data);\n};\n\n/**\n * Update task completion status\n * @param {string} taskId - Task ID\n * @param {boolean} completed - Completion status\n * @returns {Promise<Object>} Result of update\n */\nexport const updateTaskStatus = async (taskId, completed) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating task update for ${taskId}`);\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completed\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update task: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating task:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Log time for a category\n * @param {string} category - Time category\n * @param {number} hours - Hours spent\n * @param {string} date - Date of time entry\n * @returns {Promise<Object>} Result of time log\n */\nexport const logTime = async (category, hours, date) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating time log for ${category}`);\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/time-log`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        category,\n        hours,\n        date\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to log time: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error logging time:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Add a new learning resource\n * @param {Object} resourceData - Resource data\n * @returns {Promise<Object>} Result of adding resource\n */\nexport const addLearningResource = async resourceData => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating adding resource ${resourceData.title}`);\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.',\n        resource: {\n          id: `demo-${Date.now()}`,\n          ...resourceData,\n          dateAdded: new Date().toISOString().split('T')[0]\n        }\n      };\n    }\n    const response = await authFetch(`${API_URL}/learning-resources`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resourceData)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to add learning resource: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error adding learning resource:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.',\n        resource: {\n          id: `demo-${Date.now()}`,\n          ...resourceData,\n          dateAdded: new Date().toISOString().split('T')[0]\n        }\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update learning resource\n * @param {string} id - Resource ID\n * @param {Object} updates - Resource updates\n * @returns {Promise<Object>} Result of update\n */\nexport const updateLearningResource = async (id, updates) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating resource update for ${id}`);\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/learning-resources/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(updates)\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to update learning resource: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating learning resource:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Run dashboard update script\n * @returns {Promise<Object>} Result of update\n */\nexport const runDashboardUpdate = async () => {\n  try {\n    if (DEMO_MODE) {\n      console.log('DEMO MODE: Simulating dashboard update script');\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    const response = await authFetch(`${API_URL}/update-dashboard`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to run dashboard update: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error running dashboard update:', error);\n    if (DEMO_MODE) {\n      return {\n        success: true,\n        message: 'This is a read-only demo. Data modifications are not saved.'\n      };\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["authFetch","apiBaseUrl","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","includes","DEMO_MODE","REACT_APP_DEMO_MODE","fetchDashboardData","response","ok","Error","statusText","json","error","console","log","require","fallbackError","updateDashboardData","data","success","message","method","headers","body","JSON","stringify","updateSection","section","updateDashboardSection","updateTaskStatus","taskId","completed","logTime","category","hours","date","addLearningResource","resourceData","title","resource","id","Date","now","dateAdded","toISOString","split","updateLearningResource","updates","runDashboardUpdate"],"sources":["/Users/jmh/repos_software/devops-career-dashboard/dashboard/src/services/api.js"],"sourcesContent":["/**\n * API service for dashboard data\n * Uses authFetch to secure API requests\n */\n\nimport { authFetch } from './authService';\n\n// Determine API URL based on hostname\nlet apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3005/api';\nif (window.location.hostname === 'devops-dashboard.joshuamichaelhall.com') {\n  apiBaseUrl = 'https://devops-dashboard.joshuamichaelhall.com';\n}\n// Avoid double /api in the URL\nconst API_URL = apiBaseUrl.includes('/api') ? apiBaseUrl : `${apiBaseUrl}/api`;\n\n// DEMO MODE FLAG\nconst DEMO_MODE = process.env.REACT_APP_DEMO_MODE === 'true';\n\n/**\n * Fetch dashboard data\n * @returns {Promise<Object>} Dashboard data\n */\nexport const fetchDashboardData = async () => {\n  try {\n    const response = await authFetch(`${API_URL}/dashboard/data`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch dashboard data: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching dashboard data:', error);\n    \n    // Attempt to load data from appropriate source\n    try {\n      // In demo mode, use demo data\n      if (DEMO_MODE) {\n        console.log('Loading demo data as fallback...');\n        return require('../data/demo-data.json');\n      }\n      \n      // In personal mode, try to load directly from data.json\n      console.log('Loading local data file as fallback...');\n      return require('../data/data.json');\n    } catch (fallbackError) {\n      console.error('Failed to load fallback data:', fallbackError);\n      throw error; // Throw the original error\n    }\n  }\n};\n\n/**\n * Update dashboard data\n * @param {Object} data - New dashboard data\n * @returns {Promise<Object>} Result of update\n */\nexport const updateDashboardData = async (data) => {\n  try {\n    if (DEMO_MODE) {\n      console.log('DEMO MODE: Simulating dashboard update');\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/data`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to update dashboard data: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error updating dashboard data:', error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update a specific section of dashboard data\n * @param {string} section - Section name\n * @param {Object} data - New section data\n * @returns {Promise<Object>} Result of update\n */\nexport const updateSection = async (section, data) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating update to ${section} section`);\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/data/${section}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to update ${section}: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(`Error updating ${section}:`, error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update a specific dashboard section\n * Added for compatibility with DashboardContext\n */\nexport const updateDashboardSection = async (section, data) => {\n  return updateSection(section, data);\n};\n\n/**\n * Update task completion status\n * @param {string} taskId - Task ID\n * @param {boolean} completed - Completion status\n * @returns {Promise<Object>} Result of update\n */\nexport const updateTaskStatus = async (taskId, completed) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating task update for ${taskId}`);\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completed }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to update task: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error updating task:', error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};\n\n/**\n * Log time for a category\n * @param {string} category - Time category\n * @param {number} hours - Hours spent\n * @param {string} date - Date of time entry\n * @returns {Promise<Object>} Result of time log\n */\nexport const logTime = async (category, hours, date) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating time log for ${category}`);\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/time-log`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ category, hours, date }),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to log time: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error logging time:', error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};\n\n/**\n * Add a new learning resource\n * @param {Object} resourceData - Resource data\n * @returns {Promise<Object>} Result of adding resource\n */\nexport const addLearningResource = async (resourceData) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating adding resource ${resourceData.title}`);\n      return { \n        success: true, \n        message: 'This is a read-only demo. Data modifications are not saved.',\n        resource: {\n          id: `demo-${Date.now()}`,\n          ...resourceData,\n          dateAdded: new Date().toISOString().split('T')[0]\n        }\n      };\n    }\n    \n    const response = await authFetch(`${API_URL}/learning-resources`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(resourceData),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to add learning resource: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error adding learning resource:', error);\n    if (DEMO_MODE) {\n      return { \n        success: true, \n        message: 'This is a read-only demo. Data modifications are not saved.',\n        resource: {\n          id: `demo-${Date.now()}`,\n          ...resourceData,\n          dateAdded: new Date().toISOString().split('T')[0]\n        }\n      };\n    }\n    throw error;\n  }\n};\n\n/**\n * Update learning resource\n * @param {string} id - Resource ID\n * @param {Object} updates - Resource updates\n * @returns {Promise<Object>} Result of update\n */\nexport const updateLearningResource = async (id, updates) => {\n  try {\n    if (DEMO_MODE) {\n      console.log(`DEMO MODE: Simulating resource update for ${id}`);\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/learning-resources/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(updates),\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to update learning resource: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error updating learning resource:', error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};\n\n/**\n * Run dashboard update script\n * @returns {Promise<Object>} Result of update\n */\nexport const runDashboardUpdate = async () => {\n  try {\n    if (DEMO_MODE) {\n      console.log('DEMO MODE: Simulating dashboard update script');\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    \n    const response = await authFetch(`${API_URL}/update-dashboard`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Failed to run dashboard update: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error running dashboard update:', error);\n    if (DEMO_MODE) {\n      return { success: true, message: 'This is a read-only demo. Data modifications are not saved.' };\n    }\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}